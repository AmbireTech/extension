name: Build production browser extensions ⚡

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - config/arm64-build # Temporarily run on every commit to this feature branch
  release:
    types: [published] # Triggers on new releases
    branches:
      - v2 # Only trigger on releases from main branch

jobs:
  build:
    name: Build browser extension webkit and gecko .zips, ready for review submission
    runs-on: ubuntu-latest
    environment: extension-production
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout code 🛎️
        uses: actions/checkout@v4

      - name: Add SSH key to checkout a private repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Git submodules init
        run: git submodule init
        shell: bash

      - name: Git submodules update
        run: git submodule update
        shell: bash

      - name: Get Node version
        id: node-version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create .env file
        run: |
          echo "RELAYER_URL=\"${{ vars.RELAYER_URL }}\"" >> .env
          echo "VELCRO_URL=\"${{ vars.VELCRO_URL }}\"" >> .env
          echo "BROWSER_EXTENSION_PUBLIC_KEY=\"${{ vars.BROWSER_EXTENSION_PUBLIC_KEY }}\"" >> .env
          echo "REACT_APP_PIMLICO_API_KEY=\"${{ vars.REACT_APP_PIMLICO_API_KEY }}\"" >> .env
          echo "REACT_APP_JIFFYSCAN_API_KEY=\"${{ vars.REACT_APP_JIFFYSCAN_API_KEY }}\"" >> .env
          echo "NFT_CDN_URL=\"${{ vars.NFT_CDN_URL }}\"" >> .env
          echo "LEGENDS_NFT_ADDRESS=\"${{ vars.LEGENDS_NFT_ADDRESS }}\"" >> .env
          echo "LI_FI_API_KEY=\"${{ vars.LI_FI_API_KEY }}\"" >> .env
        shell: bash

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:${{ steps.node-version.outputs.NODE_VERSION }}-alpine

          # Install build dependencies
          RUN apk add --no-cache git openssh zip python3 make g++ linux-headers eudev-dev

          # Set working directory
          WORKDIR /app

          # Copy package files
          COPY package.json yarn.lock ./

          # Install dependencies
          ENV PUPPETEER_SKIP_DOWNLOAD=true
          RUN yarn install --frozen-lockfile

          # Copy the rest of the application
          COPY . .

          # Build extensions
          RUN yarn build:extensions
          EOF
        shell: bash

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/arm64 -t ambire-extensions-builder .
        shell: bash

      - name: Run build in container
        run: |
          docker run --platform linux/arm64 --rm \
            -v $(pwd):/app \
            -w /app \
            -e RELAYER_URL="${{ vars.RELAYER_URL }}" \
            -e VELCRO_URL="${{ vars.VELCRO_URL }}" \
            -e BROWSER_EXTENSION_PUBLIC_KEY="${{ vars.BROWSER_EXTENSION_PUBLIC_KEY }}" \
            -e REACT_APP_PIMLICO_API_KEY="${{ vars.REACT_APP_PIMLICO_API_KEY }}" \
            -e REACT_APP_JIFFYSCAN_API_KEY="${{ vars.REACT_APP_JIFFYSCAN_API_KEY }}" \
            -e NFT_CDN_URL="${{ vars.NFT_CDN_URL }}" \
            -e LEGENDS_NFT_ADDRESS="${{ vars.LEGENDS_NFT_ADDRESS }}" \
            -e LI_FI_API_KEY="${{ vars.LI_FI_API_KEY }}" \
            ambire-extensions-builder
        shell: bash

      - name: Create source code zip
        run: |
          zip -r extension-source-code.zip . -x "node_modules/*" -x ".git/*" -x "build/*" -x "*.zip"
        shell: bash

      - name: Upload source code 📦
        uses: actions/upload-artifact@v4
        with:
          name: extension-source-code
          path: ./extension-source-code.zip

      - name: Upload extension builds 📦
        uses: actions/upload-artifact@v4
        with:
          name: extension-builds-and-source-maps
          path: ./build/*.zip
